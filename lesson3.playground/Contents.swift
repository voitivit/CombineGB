import UIKit
import Combine


public func example(of description: String, action: () -> Void) { print("\n------ –ü—Ä–∏–º–µ—Ä:", description, "------")
action()
}



var subscription: Set<AnyCancellable> = []
//1 –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∏–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –æ—Ç Subject, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏.
//2 –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .collect() —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π .byTime –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥.
//3 –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Unicode.Scalar, –∑–∞—Ç–µ–º –≤ Character, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç–µ –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–º–æ—â—å—é .map().
//4 –°–æ–∑–¥–∞–π—Ç–µ –≤—Ç–æ—Ä–æ–π –∏–∑–¥–∞—Ç–µ–ª—å, –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –æ—Ç Subject, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∫–∞–∂–¥—ã–º —Å–∏–º–≤–æ–ª–æ–º. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç 0,9 —Å–µ–∫—É–Ω–¥—ã, —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
//5 –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –∏–∑–¥–∞—Ç–µ–ª—å ‚Äî —ç—Ç–æ —Å–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–¥–∞—Ç–µ–ª–µ–π —Å—Ç—Ä–æ–∫ –∏ —ç–º–æ–¥–∑–∏. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
//6 –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–µ–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å.

example(of: "Lesson3") {
    let queue = DispatchQueue(label: "Collect")
    let subject = PassthroughSubject<String, Never>()
    let firstPublisher = subject
    firstPublisher
        .collect(.byTime(queue, .seconds(0.9)))
        .map({ strings -> String in
            var string = String()
            for str in strings {
                string += "  \(str)"
            }
            return string
        })
        .compactMap{Unicode.Scalar($0)}
        .compactMap{Character($0)}
        .map{String($0).description}
        .sink { value in
            print(value)
        }
    let nextPublisher = PassthroughSubject<String, Never>()
    nextPublisher
        .measureInterval(using: DispatchQueue.main)
        .map{$0 < 0.9 ? "ü§Ø" : " "}
        .merge(with: firstPublisher)
        .sink{ value in print(value)}
        .store(in: &subscription)
    subject.send("Example1")
       
    
}

// –í–¢–û–†–û–ô –í–ê–†–ò–ê–ù–¢ –†–ï–®–ï–ù–ò–Ø –ë–ï–ó Unicode.Scalar
example(of: "secondOption") {
    let subject = PassthroughSubject<String, Never>()
    let firstPublisher = subject
    firstPublisher
        .map{ string in return string.map{$0}}
        .map{ String($0) }
    let nextPublisher = subject
    nextPublisher
        .measureInterval(using: DispatchQueue.main)
        .map {$0 < 0.9 ? "ü§Ø" : " "}
        .merge(with: firstPublisher)
        .sink { value in
            print(value)
        }
        .store(in: &subscription)
    subject.send("Example2")
}

